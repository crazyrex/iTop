# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: "legacy_silex_compat_layer.php" }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
#    combodo.portal.base.absolute_url: foo
    router.options.generator_base_class: Combodo\iTop\Portal\Routing\UrlGeneratorItop
    itop.cache_path: '%env(ITOP_CACHE_PATH)%'
    itop.portal_id: !php/const PORTAL_ID

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Combodo\iTop\Portal\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Combodo\iTop\Portal\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # tag services without definig them (see https://symfony.com/doc/current/service_container/tags.html#autoconfiguring-tags)
    _instanceof:
        Combodo\iTop\Portal\EventListener\ItopUserProvider:
            tags: [{ name: 'kernel.event_listener',  event: 'kernel.request'  }]
        Combodo\iTop\Portal\EventListener\ApplicationContextSetUrlMakerClass:
            tags: [{ name: 'kernel.event_listener',  event: 'kernel.request'  }]


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # VariableAccessor: when a service require a parameter, you have to fully declare it: let's create intermediate (& simple) services and have them auto-wired
    Combodo\iTop\Portal\VariableAccessor\CombodoPortalInstanceConf:
        arguments:
            - '%combodo.portal.instance.conf%'

    Combodo\iTop\Portal\VariableAccessor\ItopPortalId:
        arguments:
            - '%itop.portal_id%'

    Combodo\iTop\Portal\VariableAccessor\ItopCachePath:
        arguments:
            - '%itop.cache_path%'

    Combodo\iTop\Portal\VariableAccessor\CombodoPortalBaseAbsoluteUrl:
        arguments:
            - '%combodo.portal.base.absolute_url%'

    # legacy code as a service: since it is not in the auto-wiring path, it needs to be explicitly declared
    ModuleDesign:
        class: 'ModuleDesign'
        arguments:
            - '%itop.portal_id%'


    # decoration
    Combodo\iTop\Portal\Twig\AppVariable:
        decorates: twig.app_variable
        arguments:
            - '@Combodo\iTop\Portal\Twig\AppVariable.inner'
        calls:
            - [setContainer, ['@service_container']]


    # aliases
    bricks_collection:
        alias: Combodo\iTop\Portal\Bricks\BricksCollection
        public: true

    request_manipulator:
        alias: Combodo\iTop\Portal\Helper\RequestManipulatorHelper
        public: true

    scope_validator:
        alias: Combodo\iTop\Portal\Helper\ScopeValidatorHelper
        public: true

    context_manipulator:
        alias: Combodo\iTop\Portal\Helper\ContextManipulatorHelper
        public: true

    lifecycle_validator:
        alias: Combodo\iTop\Portal\Helper\LifecycleValidatorHelper
        public: true

    url_generator:
        alias: router
        public: true
